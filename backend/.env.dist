# ========================================
# TIME MANAGER - ENVIRONMENT CONFIGURATION
# ========================================

# Database Configuration
DB_HOST=
DB_PORT=
DB_NAME=
DB_USER=
DB_PASSWORD=

# Server Configuration
PORT=
NODE_ENV=

# JWT Configuration
# SECURITY: Generate a strong secret with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# IMPORTANT: This MUST be changed in production to a secure random string (min 32 chars)
JWT_SECRET=your-secret-key-change-this-in-production-min-32-characters-required

# CORS Configuration
# Comma-separated list of allowed origins (no spaces)
ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost

# Database SSL Configuration
# Set to 'true' only if your database requires SSL (e.g., AWS RDS, Azure, managed databases)
# For local Docker PostgreSQL, keep this as 'false' or unset
DB_SSL_ENABLED=false
# DB_SSL_REJECT_UNAUTHORIZED=true

# Docker Configuration
# When using Docker, DB_HOST should be 'postgres' (service name)
# DB_HOST=postgres

# ========================================
# PRODUCTION SECURITY CHECKLIST
# ========================================
# [ ] Change JWT_SECRET to a strong random value
# [ ] Set NODE_ENV=production
# [ ] Use strong database password
# [ ] Configure ALLOWED_ORIGINS for your domain
# [ ] Enable SSL for PostgreSQL connection
# [ ] Review all default credentials

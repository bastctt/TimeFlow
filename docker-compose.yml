services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: timemanager_db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - timemanager_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: timemanager_backend
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      DB_SSL_ENABLED: ${DB_SSL_ENABLED}
    expose:
      - "3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - timemanager_network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost}
    container_name: timemanager_frontend
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - timemanager_network
    restart: unless-stopped

  # Reverse Proxy (Nginx)
  reverse-proxy:
    image: nginx:alpine
    container_name: timemanager_reverse_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - timemanager_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  timemanager_network:
    driver: bridge
